##################################################################
# smartmet-engine-grid
##################################################################

# This is a configuration file used by the module
# smartmet-engine-grid. The SmartMet server's configuration
# file for the "grid" engine should point to this file.

##################################################################

# Importing global configuration parameters. There should be
# an environment variable SMARTMET_ENV_FILE that points to
# the global configuration file. The idea is that you can easily
# change your environment by editing this file.

@ifdef SMARTMET_ENV_FILE
  @include "$(SMARTMET_ENV_FILE)"
@else
  @print "The environment variable 'SMARTMET_ENV_FILE' not defined!" @location
  @include "%(DIR)/grid-engine/base.conf"
@endif


smartmet :
{
  library :
  {
    grid-files :
    {
      # Processing of grid/grib files requires a lot of configuration information.
      # This information should be found from the file below.
      configFile = "$(GRID_FILES_LIBRARY_CONFIG_FILE)"

      # If the data server is local then the grid file cache can be used to improve
      # performance. This cache is used caching uncompressed grid data when the original
      # data compression is slow. The grid data is first cached as uncompressed data.
      # If the cached data is not accessed for awhile it will be compressed (with
      # a fast compression) and still kept in the cache. When the cache is full
      # then the oldest data is automatically removed.
      cache :
      {
        numOfGrids                     = 400000
        maxUncompressedSizeInMegaBytes = 65000
        maxCompressedSizeInMegaBytes   = 65000
        maxSizeInMegaBytes = 65000
      }
      pointCache :
      {
        enabled = false
        hitsRequired = 1
        timePeriod = 10000
        # 73800
      }
  # The request counting counts grid point requests stores this information into a file.

      requestCounter :
      {
         enabled = false
         generatedPreloadFile = "/tmp/preload.csv"
         generatedCounterFile = "/tmp/requestCounters.csv"
      }
    }
  } # library
  engine :
  {
    grid :
    {
      enabled = true
    # The content server defines the source of the content information. In practice,
    # the master source of the content information is the Redis database. However,
    # it is not fast enough for our purposes. That's why its information is cached
    # to a memory based content server. This cache server can be a remote content
    # server that is used over CORBA connection, or it can be embedded ("local") into
    # the grid engine. The cache content server is very fast but it uses a lot of
    # memory. That's why it usually makes sense to use the remote cache server if
    # that is possible. On the other hand this means that the grid engine can
    # start much faster because it does not need to cache content information first.
    content-server :
    {
      ######  The remote content server. Notice that the remote content server has its own configuration file.
      remote  = false
      ior     = "$(CORBA_CONTENT_SERVER_IOR)"

      ######  The local content server. These settings are valid when the "remote" attribute is "false".
      content-source : 
      {
        # Content source type (redis/corba/http/file)
        type = "redis"
        redis :
        {
          address      = "$(REDIS_CONTENT_SERVER_ADDRESS)"
          port         = $(REDIS_CONTENT_SERVER_PORT)
          tablePrefix  = "$(REDIS_CONTENT_SERVER_TABLE_PREFIX)"
        }
        corba :
        {
          ior          = "$(CORBA_CONTENT_SERVER_IOR)"
        }
        http :
        {
          url          = "$(HTTP_CONTENT_SERVER_URL)"
        }
        file :
        {
          # This selection means in practice that a memory-based contentServer is embedded into the grid-engine.
          # It gets its content information from CSV-files that can be found from the "contentDir". It monitors 
          # the state of these files and automatically updates changes into its memory structures.  Notice that
          # if this content source is selected then there is no need use for the local cache.

          contentDir          = "/tmp/content"
      
          # Content sorting flags:
          # ---------------------
          #  bit 0 (1)  : reserved 
          #  bit 1 (2)  : Sort by fmi-id (radonParameterId)
          #  bit 2 (4)  : Sort by fmi-name (radonParameterName)
          #  bit 3 (8)  : Sort by grib-id
          #  bit 4 (16) : Sort by newbase-id
          #  bit 5 (32) : Sort by newbase-name
          #  bit 6 (64) : Sort by cdm-id
          #  bit 7 (128): Sort by cdm-name

          # (1 + 4 + 8)
          contentSortingFlags = 13
      
          # Size of the event list. If there are no local cache then this size should be 0.
          # Otherwise it should be quite big (1000000 - 5000000) 
    
          eventListMaxSize = 0                   
        }      

      }

      processing-log :
      {
        enabled      = false
        file         = "/var/log/smartmet/contentServer_processing.log"
        maxSize      = 100000000
        truncateSize = 20000000
      }

      debug-log :
      {
        enabled      = false
        file         = "/var/log/smartmet/contentServer_debug.log"
        maxSize      = 100000000
        truncateSize = 20000000
      }

      cache :
      {
        enabled	= true
      	requestForwardEnabled = false

        # Content sorting flags:
        # -------------------
        #  bit 0 (1)  : reserved
        #  bit 1 (2)  : Sort by fmi-id (radonParameterId)
        #  bit 2 (4)  : Sort by fmi-name (radonParameterName)
        #  bit 3 (8)  : Sort by grib-id
        #  bit 4 (16) : Sort by newbase-id
        #  bit 5 (32) : Sort by newbase-name
        #  bit 6 (64) : Sort by cdm-id
        #  bit 7 (128): Sort by cdm-name

      	# (1 + 3)
        contentSortingFlags = 13
      }
    }



    # The data server is responsible for fetching actual data from the grid files. It is possible
    # to use a local or a remote data server. The data server uses also a lot of memory and maps
    # grid files into virtual memory. That's why it would be smarter to use shared data servers
    # when possible. On the other hand, the remote data server is usually always up and running
    # which means that it can be used immediately. If the data server is local then it
    # takes some time to start the system and make sure that all grid files are available.
    # If the remote data server is disabled then the local data server is used in the engine.
    data-server :
    {
      ######  The remote data server. Notice that the remote data server has its own configuration file.
      remote  = false
      caching = true
      ior     = "$(CORBA_DATA_SERVER_IOR)"


      ######  The local data server. These settings are valid when the "remote" attribute is "false".

      # Location of grid files.
      grid-storage :
      {
        directory = "$(GRID_FILE_STORAGE_DIR)"
        memoryMapCheckEnabled = true
        preloadEnabled = false
#        preloadEnabled = true
        preloadMemoryLock = false
      	preloadFile = "%(DIR)/grid-engine/preload.csv"
        counterFile = "%(DIR)/grid-engine/requestCounters.csv"
      }


      # The data server can generate "virtual grid files" that are based on
      # existing grid files. The definition file is used in order to define
      # requirements (= required parameters) and rules (= LUA function) for
      # new virtual files. 
      virtualFiles :
      {
        enabled = true
        definitionFile = "%(DIR)/grid-engine/vff_convert.csv"
      }

      # LUA files are usually needed for generating content for the virtual
      # files. In practice, each virtual file definition contains the name
      # of the LUA function that needs to be called when the data of
      # the current virtual file is requested.

      luaFiles =
      [
        "%(DIR)/grid-engine/vff_convert.lua"
      #  ,"%(DIR)/grid-engine/vff_harvester.lua"
      ];

      processing-log :
      {
        enabled      = false
        file         = "/var/log/smartmet/dataServer_processing.log"
        maxSize      = 100000000
        truncateSize = 20000000
      }

      debug-log :
      {
        enabled      = false
        file         = "/var/log/smartmet/dataServer_debug.log"
        maxSize      = 100000000
        truncateSize = 20000000
      }
    }


    # The query server is responsible for making data queries to the data server according
    # to the content information that it gets from the content server. Also the query server
    # can be local or remote. Sometimes it is smarter to locate the query server closer to
    # the content server and the data server, because there might be a lot traffic between them.
    # If the remote query server is disabled then the local query server is used in the engine.

    query-server :
    {
      remote  = false
      ior     = "$(CORBA_QUERY_SERVER_IOR)"

      producerFile = "$(GRID_ENGINE_PRODUCER_FILE)"
      producerMappingFiles = [ "%(DIR)/grid-engine/producerMapping.cfg" ]

      queryCache :
      {
        # A query object is removed from the cache if it accessed in this time (seconds). 
    
        enabled = true
        #maxAge = 86400
        maxAge = 300
      }
   

      # If the gridEngine notices that there are not valid mappings available for all
      # parameters found from the contentServer, then it automatically adds these unmapped
      # parameters to the following files. The queryServer needs these mappings in order to
      # find the current parameters. You can move these automatically generated mappings into
      # a more permanent mapping file (mappings_fmi_auto.csv => mappings_fmi.csv). On the other
      # hand, when the permanent mapping files are empty then you can get your basic mapping
      # settings from these automatically generated files (i.e. when you are first time
      # configuring your system).


      # 1 = FMI_ID, 2 = FMI_NAME, 3 = GRIB_ID, 4 = NEWBASE_ID, 5 = NEWBASE_NAME, 6 = CDM_ID, 7 = CDM_NAME

      mappingTargetKeyType = 2

      mappingUpdateFile :
      {
        fmi     = "%(DIR)/grid-engine/mapping_fmi_auto.csv"
        newbase = "%(DIR)/grid-engine/mapping_newbase_auto.csv"
      }

      luaFiles =
      [
        "%(DIR)/grid-engine/function_basic.lua",
        "%(DIR)/grid-engine/function_interpolation.lua",
        "%(DIR)/grid-engine/function_conversion.lua",
        "%(DIR)/grid-engine/function_newbase.lua",
        "%(DIR)/grid-engine/function_harvester.lua",
        "%(DIR)/grid-engine/function_demo.lua"
      ];

      mappingFiles =
      [
        "%(DIR)/grid-engine/mapping_fmi.csv",
        "%(DIR)/grid-engine/mapping_fmi_auto.csv",
        "%(DIR)/grid-engine/mapping_newbase.csv",
        "%(DIR)/grid-engine/mapping_newbase_auto.csv",
        "%(DIR)/grid-engine/mapping_virtual.csv"
      ];

      aliasFiles =
      [
        "%(DIR)/grid-engine/alias_demo.cfg",
        "%(DIR)/grid-engine/alias_newbase_extension.cfg"
      ];

      processing-log :
      {
        enabled      = false
        file         = "/var/log/smartmet/queryServer_processing.log"
        maxSize      = 100000000
        truncateSize = 20000000
      }

      debug-log :
      {
        enabled      = false
    #    file         = "/dev/stdout"
        file         = "/var/log/smartmet/queryServer_debug.log"
        maxSize      = 100000000
        truncateSize = 20000000
      }
    }

    }
  }
}
